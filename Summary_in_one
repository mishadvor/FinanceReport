"import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "######------------ Загрузка данных--------##############\n",
        "df = pd.read_excel('/content/Sveta_280425.xlsx',\n",
        "                   dtype=({'Баркод': str, 'Размер': str}))\n",
        "\n",
        "##########---------- Агрегация исходной таблица по Артикулам и суммы колонок ------------\n",
        "\n",
        "# Суммирование и агрегация данных (игнорируя нули в цене)\n",
        "sales_per_category = df.groupby('Артикул поставщика').agg({\n",
        "    'Цена розничная': lambda x: x[x != 0].mean() if any(x != 0) else 0,   # Среднее без учета нулей\n",
        "    'Вайлдберриз реализовал Товар (Пр)': lambda x: x[x != 0].mean() if any(x != 0) else 0,\n",
        "    'К перечислению Продавцу за реализованный Товар': 'sum',\n",
        "    'Услуги по доставке товара покупателю': 'sum'\n",
        "\n",
        "}).reset_index()\n",
        "\n",
        "# Сортировка по убыванию суммы перечислений\n",
        "sales_per_category = sales_per_category.sort_values(\n",
        "    'К перечислению Продавцу за реализованный Товар',\n",
        "    ascending=False\n",
        ")\n",
        "\n",
        "# Округление всех числовых колонок до целых чисел\n",
        "numeric_cols = sales_per_category.select_dtypes(include=['float64']).columns\n",
        "sales_per_category[numeric_cols] = sales_per_category[numeric_cols].round().astype(int)\n",
        "\n",
        "sales_per_category['Сумма на рс'] = sales_per_category ['К перечислению Продавцу за реализованный Товар'] - sales_per_category ['Услуги по доставке товара покупателю']\n",
        "sales_per_category['СПП'] = sales_per_category ['Цена розничная'] - sales_per_category ['Вайлдберриз реализовал Товар (Пр)']\n",
        "\n",
        "# Переименования столбцов\n",
        "sales_per_category.columns = [\n",
        "    'Артикул поставщика',\n",
        "    'Цена Наша средняя',\n",
        "    'Цена ВБ средняя',\n",
        "    'К перечислению',\n",
        "    'Логистика',\n",
        "    'Сумма на рс',\n",
        "    'СПП'\n",
        "\n",
        "]\n",
        "\n",
        "#-----------------------------------------------\n",
        "# 1. Извлекаем колонку СПП\n",
        "spp_col = sales_per_category.pop('СПП')\n",
        "\n",
        "# 2. Вставляем её после \"Цена ВБ средняя\" (позиция 3)\n",
        "sales_per_category.insert(3, 'СПП', spp_col)\n",
        "#------------------------------------------------\n",
        "\n",
        "# Вычисляем % Логистики\n",
        "sales_per_category ['% Логистики'] = (sales_per_category ['Логистика'] / sales_per_category ['К перечислению'])*100\n",
        "\n",
        "\n",
        "# Обработка колонки % Логистики\n",
        "sales_per_category['% Логистики'] = (\n",
        "    sales_per_category['% Логистики']\n",
        "    .replace([np.inf, -np.inf], np.nan)  # Заменяем бесконечности\n",
        "    .fillna(0)                           # Заменяем NaN на 0\n",
        "    .round(0)                            # Округляем до 1 знака после запятой\n",
        "    .astype(int)                       # Раскомментировать для целых чисел\n",
        ")\n",
        "\n",
        "#---------- Меняем порядок колонки % Логистики --------------\n",
        "# 1. Извлекаем колонку % Логистики\n",
        "spp_col = sales_per_category.pop('% Логистики')\n",
        "\n",
        "# 2. Вставляем её после \"Цена ВБ средняя\" (позиция 3)\n",
        "sales_per_category.insert(6, '% Логистики', spp_col)\n",
        "#---------------------------------------------------------------\n",
        "\n",
        "\n",
        "# Вывод первых 10 строк\n",
        "print(sales_per_category.head(10).to_string(index=False))\n",
        "\n",
        "\n",
        "############## ------Считаем сумму Возвратов ------ ################\n",
        "\n",
        "# Фильтруем только возвраты\n",
        "returns_df = df[df['Тип документа'] == 'Возврат']\n",
        "\n",
        "# Группируем по артикулу поставщика и суммируем розничные цены\n",
        "returns_art = returns_df.groupby('Артикул поставщика')['Цена розничная'].sum().reset_index()\n",
        "\n",
        "# Сортируем по сумме возвратов (по убыванию)\n",
        "returns_sorted = returns_art.sort_values('Цена розничная', ascending=False)\n",
        "\n",
        "# Переименовываем колонку для ясности\n",
        "returns_art_sorted = returns_sorted.rename(columns={'Цена розничная': 'Сумма возвратов'})\n",
        "\n",
        "# Округляем\n",
        "returns_art_sorted['Сумма возвратов'] = returns_art_sorted['Сумма возвратов'].astype(int)\n",
        "\n",
        "\n",
        "\n",
        "#print(returns_art_sorted.head(10).to_string(index=False))\n",
        "#### -------- Чисты проажи в Рублях ------------ ##########\n",
        "\n",
        "sales_per_category ['Сумма Чистых продаж'] = returns_art_sorted['']\n",
        "\n",
        "\n",
        "\n",
        "#####----- Сортируем Колонку 'Виды логистики, штрафов и доплат' по типам и связываем с Артикулом продавца\n",
        "\n",
        "# 1. Сначала преобразуем списки в отдельные строки с помощью explode()\n",
        "df_exploded = df.explode('Виды логистики, штрафов и доплат')\n",
        "\n",
        "# 2. Заполним пропущенные значения (если есть)\n",
        "df_exploded['Виды логистики, штрафов и доплат'\n",
        "] = df_exploded['Виды логистики, штрафов и доплат'\n",
        "].fillna('Не указано')\n",
        "\n",
        "# 3. Теперь можем группировать, считать и отсортировать по одному из сторлбцов.\n",
        "status_log = (df_exploded.groupby('Артикул поставщика')\n",
        "              ['Виды логистики, штрафов и доплат']\n",
        "              .value_counts()\n",
        "              .unstack(fill_value=0)\n",
        "              #.sort_values('', ascending=True)\n",
        "              .reset_index()\n",
        "              )\n",
        "\n",
        "# Вычисляем % Выкупа для каждого Артикула\n",
        "status_log['%Выкупа'] = (((status_log['К клиенту при продаже'] - status_log['От клиента при возврате']) /\n",
        "                (status_log['От клиента при отмене'] + status_log['К клиенту при продаже'])) * 100).round(0)\n",
        "\n",
        "# Округляем\n",
        "#status_log = status_log.fillna(0).astype(int)\n",
        "\n",
        "# Создаем колонку Чистые продажи в Штуках\n",
        "status_log['Чистые продажи'] = (status_log['К клиенту при продаже'] - status_log['От клиента при возврате'])\n",
        "\n",
        "# Вычисляем Себестоимость для каждого Артикула\n",
        "status_log['Себестоимость'] = ((status_log['Чистые продажи'])* 600).round(0)\n",
        "\n",
        "# Сортировка\n",
        "status_log.sort_values(by='Чистые продажи', ascending=False, inplace=True)\n",
        "\n",
        "#print(status_log.head(10).to_string(index=True))\n",
        "\n",
        "##### --------  СПП по каждому Артикулу ---------- ##################\n",
        "\n",
        "# Подсчет СПП каждого артикула\n",
        "df['СПП'] = df['Цена розничная'] - df['Вайлдберриз реализовал Товар (Пр)']\n",
        "\n",
        "# Группировка по Артикулу и СПП\n",
        "SPP_sum = df.groupby('Артикул поставщика').agg({\n",
        "    'СПП': 'sum'\n",
        " })\n",
        "\n",
        "# Сортируем по убыванию\n",
        "SPP_sum.sort_values(by='СПП', ascending=False, inplace=True)\n",
        "\n",
        "# Округляем\n",
        "SPP_sum = SPP_sum.fillna(0).astype(int)\n",
        "\n",
        "#print(SPP_sum.head(10).to_string(index=True))\n",
        "\n",
        "\n",
        "####### ---------- Объединяем в одну таблицу -------- ######################\n",
        "\n",
        "\n",
        "#print(sales_per_category.columns)\n",
        "#print(status_log.columns)\n",
        "\n",
        "result = (\n",
        "    sales_per_category.merge(status_log[['Артикул поставщика', '%Выкупа', 'Себестоимость']],\n",
        "           on='Артикул поставщика', how='left')\n",
        "#    .merge(df3[['Артикул поставщика', 'Остатки', 'Склад']],\n",
        "#           on='Артикул поставщика', how='left')\n",
        "#    .merge(df4[['Артикул поставщика', 'Рейтинг', 'Отзывы']],\n",
        "#           on='Артикул поставщика', how='left')\n",
